<?php
/**
 * @file
 *
 */

use Drupal\block\Entity\Block;
use Drupal\block_content\Entity\BlockContent;

/**
 * Implements hook_cron().
 */
function block_updates_cron() {
  $blocks = \Drupal::entityTypemanager()
    ->getStorage('block_content')
    ->loadByProperties(['type' => 'stock_exchange_rate_card']);

  // ensure that block type 'stock_exchange_rate_card' exists and has blocks
  if (is_array($blocks) && sizeof($blocks) > 0) {
    foreach ($blocks as $block_id => $block) {
      $blockSymbol = $block->get('field_symbol')->getString();

      // makes httpRequest using Guzzle, sending the current block symbol
      $data = [];
      $client = \Drupal::httpClient();
      try {
        //$url = 'http://dev.markitondemand.com/MODApis/Api/v2/Quote/json?symbol=' . $blockSymbol;
        $settings = \Drupal::config('block_updates.settings');
        $url = $settings->get('stock_api_url') . $blockSymbol;

        $response = $client->get($url, ['headers' => ['Accept' => 'text/plain']]);
        $statusCode = $response->getStatusCode();
        if ($statusCode == '200') {
          $data = (string)$response->getBody();
          if (!empty($data)) {
            $data = json_decode($data, TRUE);
          }
        }else {
          drupal_set_message(t('An error occurred and while getting information from API.'), 'warning');
        }
      } catch (RequestException $e) {
        watchdog_exception('block_updates', $e->getMessage());
      }

      if (sizeof($data) > 0) {
        $fieldValues = [];
        $fieldValues['field_last_price'] = (isset($data['LastPrice'])) ? $data['LastPrice'] : 'N/A';
        $fieldValues['field_change']     = (isset($data['Change'])) ? $data['Change'] : 'N/A';

        // get fields to update from setting checkboxes
        $fieldsToUpdate = $settings->get('fields_to_update');

        if(is_array($fieldsToUpdate) && (sizeof($fieldsToUpdate) > 0)) {
          $mustSave = FALSE;
          foreach ($fieldsToUpdate as $field_key => $value) {
            if ($value !== 0) {
              $block->set($field_key, $fieldValues[$field_key]);
              $mustSave = TRUE;
            }
          }
          if ($mustSave) {
            $block->save();
          }
        }
      }
    }
  }
}
